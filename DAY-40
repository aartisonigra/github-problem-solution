Maximum Distance Between Identical Elements After Reversal
Problem Statement
You are given an array of integers arr of length N. The task is to find the maximum distance between any two identical elements after reversing a contiguous subarray exactly once.

You are allowed to reverse exactly one subarray (a contiguous part of the array). After reversing this subarray, find the maximum distance between any two identical elements in the modified array. The distance between two elements arr[i] and arr[j] is given by |i - j| where i and j are the indices of those elements.

 

Input Format
An integer N (1 ≤ N ≤ 10^5) representing the length of the array.

An array arr of size N (1 ≤ arr[i] ≤ 10^5), where each element is an integer.

Output Format
An integer representing the maximum distance between two identical elements after one possible subarray reversal.

 

Constraints
1 ≤ n ≤ 10^5

1 ≤ arr[i] ≤ 10^5

Your solution should work within O(n) or O(n log n) time complexity to be efficient enough.

Sample Testcase 0
Testcase Input
9  
7 3 1 7 4 3 2 1 7
Testcase Output
8
Explanation
Element 7 occurs at index 0, 3, and 8


Distance = 8 - 0 = 8


Element 3 occurs at index 1 and 5 → Distance = 4


Element 1 occurs at index 2 and 7 → Distance = 5


The maximum distance = 8 (for element 7)

Sample Testcase 1
Testcase Input
7  
4 1 2 3 1 5 4
Testcase Output
6
Explanation
Element 4 occurs at index 0 and 6 → Distance = 6


Element 1 occurs at index 1 and 4 → Distance = 3


Other elements are either unique or occur only once

The maximum distance = 6 (for element 4)

SOLTUIONS:

import java.util.*;

public class Main {
    public static int maxDistance(int[] arr) {
        int n = arr.length;
        Map<Integer, Integer> first = new HashMap<>();
        Map<Integer, Integer> last = new HashMap<>();

        int maxDist = 0;

        for (int i = 0; i < n; i++) {
            int val = arr[i];
            if (!first.containsKey(val)) {
                first.put(val, i);
            }
            last.put(val, i);
        }

        // Max distance from original positions
        for (int key : first.keySet()) {
            int dist = last.get(key) - first.get(key);
            maxDist = Math.max(maxDist, dist);
        }

        return maxDist > 0 ? maxDist : -1; // If no identical pairs found
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt(); // Read the size of the array

        int[] arr = new int[n];
        for (int i = 0; i < n; ++i) {
            arr[i] = scanner.nextInt(); // Read the array elements
        }

        int result = maxDistance(arr);
        System.out.println(result);
    }
}
