Path of the Phantom Swapper
Problem Statement
You’re building an AI for a stealth drone that must navigate a linear route of encrypted beacons, each marked with a distinct energy signature (an integer). The drone can only make one "phantom swap" during its path: it can swap any two elements in the array once, to try to create a special property.

The goal of the drone is to minimize the number of "energy peaks" in the beacon path.

An energy peak is defined as an index i such that arr[i] > arr[i - 1] and arr[i] > arr[i + 1].

The AI is allowed to perform at most one swap of any two elements (possibly no swap at all). It must choose the swap that leads to the minimum number of energy peaks after the operation.

Input Format
The first line contains an integer N, representing the number of energy beacons.

The second line contains an array arr of N integers, representing the energy levels of the beacons.

Output Format
Print a single integer representing the minimum number of energy peaks that can be achieved after at most one swap.

Constraints
3 ≤ N ≤ 5*10^3

-10^9 ≤ arr[i] ≤ 10^9

All elements may be distinct or repeated.

At most one swap of any two indices allowed (including no swap).

Sample Testcase 0
Testcase Input
6
3 3 4 2 8 6
Testcase Output
1
Explanation
Initial array: [3, 3, 4, 2, 8, 6]
Peak at index 2: 4 > 3 and 4 > 2 
Peak at index 4: 8 > 2 and 8 > 6 


No other peaks.
Even after swapping every possible elemets at most, there will still a peak left.

Minimum achievable peaks = 1

Sample Testcase 1
Testcase Input
7
1 5 2 6 3 4 7
Testcase Output
0
Explanation
Initial array: [1, 5, 2, 6, 3, 4, 7]
Peaks:
Index 1: 5 > 1 and 5 > 2
Index 3: 6 > 2 and 6 > 3


Try swapping index 0 (1) with index 3 (6) → [6, 5, 2, 1, 3, 4, 7]
New array → No Peak element


Minimum achievable peaks = 0

SOLUTIONS:
import java.util.*;

public class Main {

    // Check if a given index is a peak
    public static boolean isPeak(int[] arr, int i) {
        if (i <= 0 || i >= arr.length - 1) return false;
        return arr[i] > arr[i - 1] && arr[i] > arr[i + 1];
    }

    // Count total peaks in the array
    public static int countPeaks(int[] arr) {
        int peaks = 0;
        for (int i = 1; i < arr.length - 1; i++) {
            if (isPeak(arr, i)) peaks++;
        }
        return peaks;
    }

    public static void minimumEnergyPeaks(int n, int[] arr) {
        int originalPeaks = countPeaks(arr);
        int minPeaks = originalPeaks;

        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (i == j) continue;

                // Calculate peaks affected by i and j before swap
                HashSet<Integer> affected = new HashSet<>();
                for (int d = -1; d <= 1; d++) {
                    if (i + d > 0 && i + d < n - 1) affected.add(i + d);
                    if (j + d > 0 && j + d < n - 1) affected.add(j + d);
                }

                int oldPeaks = 0;
                for (int idx : affected) {
                    if (isPeak(arr, idx)) oldPeaks++;
                }

                // Swap
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;

                int newPeaks = 0;
                for (int idx : affected) {
                    if (isPeak(arr, idx)) newPeaks++;
                }

                minPeaks = Math.min(minPeaks, originalPeaks - oldPeaks + newPeaks);

                // Swap back
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        System.out.println(minPeaks);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        minimumEnergyPeaks(n, arr);
    }
}

