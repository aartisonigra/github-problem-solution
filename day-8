PROBLEAMS:

RoboLex's Dilemma: Safeguarding the Instruction Stream
Problem Statement
In a futuristic world, a groundbreaking robot named RoboLex was built to interpret human instructions fed to it as strings. RoboLex's advanced programming allowed it to traverse the string character by character, identifying meaningful substrings that corresponded to actions. For example, encountering the substring "run" made RoboLex sprint forward, "jump" caused it to leap over obstacles, and so on.

However, RoboLex had its flaws. A critical oversight  was discovered when the word "kill" appeared in the instruction string. This caused RoboLex to mistakenly attempt destructive behaviors—an action completely unintended by its creators, who envisioned it as a harmless assistant.

To address this flaw, RoboLex's creators devised a simple rule: if "kill" appeared as a substring in the instructions, RoboLex would halt all operations. Therefore, to ensure RoboLex worked efficiently, its creators needed to remove just enough characters from the instruction string to eliminate all occurrences of "kill" while preserving as many meaningful actions as possible.

Can you help its creators determine the longest possible instruction string that RoboLex can safely execute without encountering the forbidden substring?

Input Format
The first line contains an integer N, the length of the instruction string.

The second line contains a string S of length N consisting of lower-case Latin letters (a to z).

Output Format
Print a single integer, the length of the longest possible instruction string that RoboLex can safely execute without encountering the forbidden substring "kill".

Constraints
1 <= N <= 10^5

Sample Testcase 0
Testcase Input
10
abckillxyz
Testcase Output
9
Explanation
If we remove k from the string, there is no substring “kill”. The string becomes “abcillxyz” with length 9.

Sample Testcase 1
Testcase Input
14
killabckillxyz
Testcase Output
12
Explanation
There are two occurrences of “kill” in S, so we remove k from both, which is also the minimum characters needed to remove all occurrences of “kill” from S. The remaining string becomes illabcillxyz, length of which is 12.


SOLUTIONS:

import java.util.Scanner;

public class Main {
    public static int userLogic(int n, String s) {
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            sb.append(c);
            if (sb.length() >= 4 && sb.substring(sb.length() - 4).equals("kill")) {
                sb.deleteCharAt(sb.length() - 4); // remove 'k' to break "kill"
            }
        }
        return sb.length(); // final safe instruction length
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String s = scanner.next();
        int result = userLogic(n, s);
        System.out.println(result);
    }
}

