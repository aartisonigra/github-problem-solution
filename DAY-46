Modular Gear Synchronization
Problem Statement
In a giant underground mechanical vault, N gears rotate in isolation. Each gear completes one full rotation after a certain number of seconds. However, these gears are defective — each gear only rotates after every multiple of its delay time and skips its next tick if it coincides with any of its forbidden ticks.

For each gear i:

It rotates every a_i seconds.

However, it must skip any time t such that t % f_i == 0.

Your task is to determine the earliest time T > 0 when all gears rotate simultaneously.

If there is no such possible time where all gears can rotate together (i.e., all constraints cannot be satisfied), print -1.

Input Format
First line: Integer N — the number of gears (1 ≤ N ≤ 10^5)

Next N lines: Two integers per line — `a_i` and `f_i` for each gear.

Output Format
A single integer.

Constraints
1 ≤ N ≤ 10^5

1 ≤ a_i, f_i ≤ 10^9

Sample Testcase 0
Testcase Input
3
4 6
6 9
8 10
Testcase Output
-1
Explanation

LCM of (4, 6, 8) = 24


Check if 24 is divisible by any forbidden ticks (6, 9, 10):



24 % 6 == 0 → forbidden, so no valid T = 24



Since 24 is divisible by forbidden tick 6, and all multiples of 24 will also be divisible by 6, answer is -1.

Sample Testcase 1
Testcase Input
2
3 2
5 4
Testcase Output
15
Explanation

LCM of (3, 5) = 15


Check if 15 divisible by forbidden ticks (2, 4):



15 % 2 != 0


15 % 4 != 0



So T = 15 is valid, as it meets all gear requirements and is not forbidden.


SOLTUIONS:

import java.util.*;

public class Main {
    public static long gcd(long a, long b) {
        while (b != 0) {
            long temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    public static long safeLcm(long a, long b) {
        long g = gcd(a, b);
        if (a > Long.MAX_VALUE / (b / g)) {
            // Overflow case
            return -1;
        }
        return a * (b / g);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        long[] a = new long[n];
        long[] f = new long[n];

        for (int i = 0; i < n; i++) {
            a[i] = sc.nextLong();
            f[i] = sc.nextLong();
        }

        long T = a[0];
        for (int i = 1; i < n; i++) {
            T = safeLcm(T, a[i]);
            if (T == -1) {
                System.out.println(-1);
                return;
            }
        }

        for (int i = 0; i < n; i++) {
            if (T % f[i] == 0) {
                System.out.println(-1);
                return;
            }
        }

        System.out.println(T);
    }
}
