Pairing the array
Problem Statement
Ram was playing with an array when he got to know the existence of different patterns found in arrays. He wrote code for different kinds of patterns and enjoyed it a lot, one day he got stuck in a pattern and asked for your help.

He gave you an array letâ€™s call it arr and asked you to find the number of pairs of (i,j) such that given a number k :

0<=i<j<=arr.length - 1
arr[i] * arr[j] is divisible by k.
Given an array and a number k, find the number of pairs of elements in the array such that their product is divisible by k.

 

Input Format
The first line contains a single integer, k.

The second line contains a single integer, n, representing the number of elements in the array.

The third line contains space-seperated n integers, arr[i], representing the elements of the array.

Output Format
Print the number of pairs divisible by k.

Constraints
1 <= arr.length<= 105

1 <= arr[i], k <= 105

Sample Testcase 0
Testcase Input
3
5
1 2 3 4 5

Testcase Output
4
Explanation
The possible pairs of numbers which satisfy the given condition are (2,4), (1,4) , (4,5), (3,4) hence the number of pairings possible is 4.
Sample Testcase 1
Testcase Input
1
4 
1 2 3 4

Testcase Output
6
Explanation
The possible pairs of numbers which satisfy the given condition are (1,2) (1,3) (1,4) (2,3) (2,4) (3,4) hence the number of pairings possible is 6.


  SOLUTIONS:

#include <stdio.h>
#include <stdlib.h>

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int count_pairs_divisible_by_k(int k, int n, int arr[]) {
    int *g = (int*)malloc(n * sizeof(int));
    
    // Step 1: compute gcd of each element with k
    for (int i = 0; i < n; i++) {
        g[i] = gcd(arr[i], k);
    }

    // Step 2: count frequencies of each gcd
    int freq[100005] = {0}; // because arr[i], k <= 1e5
    for (int i = 0; i < n; i++) {
        freq[g[i]]++;
    }

    // Step 3: count valid pairs
    long long count = 0;
    for (int i = 1; i <= k; i++) {
        if (freq[i] == 0) continue;
        for (int j = i; j <= k; j++) {
            if (freq[j] == 0) continue;

            // check condition
            long long prod = (long long)i * j;
            if (prod % k == 0) {
                if (i == j) {
                    count += (long long)freq[i] * (freq[i] - 1) / 2; // choose 2
                } else {
                    count += (long long)freq[i] * freq[j];
                }
            }
        }
    }

    free(g);
    return (int)count;
}

int main() {
    int k, n;
    scanf("%d", &k);
    scanf("%d", &n);
    int arr[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("%d\n", count_pairs_divisible_by_k(k, n, arr));
    return 0;
}
