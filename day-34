Teleporting Strings Through Prime Portals
Problem Statement
You're given a string S of length N, and an array P[1...K] of K positive integers, each representing prime portal indices (1-based).

Each prime portal allows teleportation of a character to any other portal index, but with constraints:

You can only teleport characters that are at a prime index in the string (1-based).

You may perform at most M teleportations total (across any characters).

Your goal is to determine:

The lexicographically largest string that can be obtained from S after at most M valid teleportations using portals.

If it's not possible to make any teleportation, return the original string.

Input Format
First line contains three integers N, K, and M

Second line contains a string S of length N

Third line contains K space-separated integers P[1] P[2] ... P[K]

Output Format
Print the lexicographically largest string obtainable after applying at most M valid teleportations using the portal rules.

Constraints
1 ≤ N ≤ 10^5

1 ≤ K ≤ 10^5

1 ≤ P[i] ≤ N

0 ≤ M ≤ 10^5

S consists of only lowercase English letters.

Sample Testcase 0
Testcase Input
6 4 3
gfedcb
2 3 5 6
Testcase Output
gfedcb
Explanation
String: "gfedcb"


Portal indices: [2, 3, 5, 6] → characters: f, e, c, b


Prime indices among them: 2, 3, 5 → only positions 2 (f), 3 (e), 5 (c) are valid


3 teleportations allowed


Now, check if we can get any improvement:


Try f (2) to e (3) → no gain


Try f (2) to c (5) → c < f → swap: gcedfb


Try e (3) to f (new 2) → now at position 2 is c, not worth it


Nothing more improves lexicographically


But if we actually simulate it carefully, we find:


The largest possible string still ends up as "gfedcb" — any teleportation increases lexicographical order.

Sample Testcase 1
Testcase Input
5 3 2
dcbaz
2 3 5
Testcase Output
dzcab
Explanation
String: "dcbaz"


Portal indices: [2, 3, 5] → 1-based → positions 2 (c), 3 (b), 5 (z)


Primes among them: 2, 3, 5 → All are prime


You can do up to 2 teleportations


Let's analyze:


From position 2 (c), teleport to 5 (z) → "dcbaz" → "dzbac"


Now, from position 3 (b), teleport to 5 (c) → "dzbac" → "dzcab"


SOLUTIONS:

import java.util.*;

public class Main {

    // Function to find all primes up to N using Sieve of Eratosthenes
    public static boolean[] getPrimeFlags(int n) {
        boolean[] isPrime = new boolean[n + 1];
        Arrays.fill(isPrime, true);
        isPrime[0] = false;
        isPrime[1] = false;
        for (int i = 2; i * i <= n; i++) {
            if (isPrime[i]) {
                for (int j = i * i; j <= n; j += i) {
                    isPrime[j] = false;
                }
            }
        }
        return isPrime;
    }

    public static String obtainSmallestString(int N, int K, int M, String S, int[] P) {
        boolean[] isPrime = getPrimeFlags(N);
        Set<Integer> portalSet = new HashSet<>();
        for (int p : P) {
            if (isPrime[p]) {
                portalSet.add(p - 1); // Convert to 0-based
            }
        }

        // Convert to char array for mutation
        char[] chars = S.toCharArray();

        // Collect valid positions and their characters
        List<Integer> positions = new ArrayList<>(portalSet);
        List<Character> letters = new ArrayList<>();
        for (int pos : positions) {
            letters.add(chars[pos]);
        }

        // Sort positions ascending, letters descending (for lexicographically largest)
        Collections.sort(positions);
        letters.sort(Collections.reverseOrder());

        // Perform at most M swaps
        int swaps = Math.min(M, positions.size());
        for (int i = 0; i < swaps; i++) {
            chars[positions.get(i)] = letters.get(i);
        }

        return new String(chars);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int M = scanner.nextInt();
        scanner.nextLine(); // consume newline
        String S = scanner.nextLine();
        int[] P = new int[K];
        for (int i = 0; i < K; i++) {
            P[i] = scanner.nextInt();
        }
        String result = obtainSmallestString(N, K, M, S, P);
        System.out.println(result);
    }
}
