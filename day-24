Distinct Paths in a Weighted Tree
Problem Statement
You are given an undirected weighted tree with N nodes and (N-1) edges, where each edge has a positive weight.

Additionally, you are given q queries, where each query consists of a single integer X. For each query, count the number of distinct paths in the tree where the maximum edge weight in the path is less than or equal to X.

A path is defined as a sequence of connected edges between any two nodes in the tree.

A path from node A to node B is considered the same as a path from node B to node A.

A tree is an acyclic connected graph with n nodes and (N−1) edges.

Input Format
The first line contains an integer n (2 ≤ n ≤ 10^4) — the number of nodes in the tree.

The next (n-1) lines each contain three integers U, V, W (1 ≤ U,V ≤,0 ≤ W ≤ 10^5), representing an undirected edge between nodes uuu and vvv with weight www.

The next line contains an integer Q (1 ≤ Q ≤ 10^4) — the number of queries.

The next line contains q integers, x1, x2, ..., xq (0 ≤ Xi ≤ 10^5) , where each xix_ixi​ is the threshold weight for the query.

Output Format
Print q integers, where the ith integer represents the number of distinct paths in the tree such that the maximum edge weight in the path is ≤ Xi

Constraints
2 ≤ N ≤ 104

1 ≤ Q ≤ 104

1 ≤ U,V ≤ n

U ≠ V

0 ≤ W  ≤ 10^5

0 ≤ Xi ≤ 10^5

Sample Testcase 0
Testcase Input
3
1 2 1
2 3 4
1
3
Testcase Output
1
Explanation


Query 1 (max weight = 3): The only valid path is (1 to 2) (weight = 1).




The path (2 to 3) is not included since its edge weight (4) exceeds 3.



Sample Testcase 1
Testcase Input
7
1 2 3
2 3 1
2 4 9
3 6 7
3 5 8
5 7 4
3
1 3 5
Testcase Output
1 3 4
Explanation


Query 1 (max weight = 1):




Valid path: (2 to 3)






Query 2 (max weight = 3):




Valid paths: (1 to 2), (1 to 3), (2 to 3)






Query 3 (max weight = 5):




Valid paths: (1 to 2), (1 to 3), (2 to 3), (5 to 7)


  import java.util.*;

class Main {
    static class Edge {
        int u, v, w;
        Edge(int u, int v, int w) {
            this.u = u;
            this.v = v;
            this.w = w;
        }
    }

    static class DSU {
        int[] parent, size;

        DSU(int n) {
            parent = new int[n + 1];
            size = new int[n + 1];
            for (int i = 1; i <= n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }

        int find(int x) {
            if (parent[x] != x)
                parent[x] = find(parent[x]);
            return parent[x];
        }

        long union(int a, int b) {
            int rootA = find(a);
            int rootB = find(b);
            if (rootA == rootB) return 0;

            long count = (long) size[rootA] * size[rootB];

            if (size[rootA] < size[rootB]) {
                int temp = rootA;
                rootA = rootB;
                rootB = temp;
            }

            parent[rootB] = rootA;
            size[rootA] += size[rootB];

            return count;
        }
    }

    public static void maximum_weight_paths(int n, int[][] edges, int q, int[] queries, int[] result) {
        List<Edge> edgeList = new ArrayList<>();
        for (int[] e : edges) {
            edgeList.add(new Edge(e[0], e[1], e[2]));
        }

        // Sort edges by weight
        edgeList.sort(Comparator.comparingInt(e -> e.w));

        // Store queries with index to maintain order
        int[][] qWithIndex = new int[q][2];
        for (int i = 0; i < q; i++) {
            qWithIndex[i][0] = queries[i]; // query value
            qWithIndex[i][1] = i;          // original index
        }

        Arrays.sort(qWithIndex, Comparator.comparingInt(a -> a[0]));

        DSU dsu = new DSU(n);
        int edgeIdx = 0;
        long totalPaths = 0;
        long[] ans = new long[q];

        for (int i = 0; i < q; i++) {
            int limit = qWithIndex[i][0];

            while (edgeIdx < edgeList.size() && edgeList.get(edgeIdx).w <= limit) {
                Edge e = edgeList.get(edgeIdx);
                totalPaths += dsu.union(e.u, e.v);
                edgeIdx++;
            }

            ans[qWithIndex[i][1]] = totalPaths;
        }

        for (int i = 0; i < q; i++) {
            result[i] = (int) ans[i];
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] edges = new int[n - 1][3];
        for (int i = 0; i < n - 1; i++) {
            edges[i][0] = sc.nextInt();
            edges[i][1] = sc.nextInt();
            edges[i][2] = sc.nextInt();
        }

        int q = sc.nextInt();
        int[] queries = new int[q];
        for (int i = 0; i < q; i++) {
            queries[i] = sc.nextInt();
        }

        int[] result = new int[q];
        maximum_weight_paths(n, edges, q, queries, result);
        for (int r : result) {
            System.out.print(r + " ");
        }
    }
}
