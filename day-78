Hierarchical Warehouse Partitioning
Problem Statement
In a large automated warehouse, items are stored in a high-density 3D storage system. The warehouse is structured as a 3-dimensional grid of size N × M × L, where:

N represents the number of vertical layers (floors),

M represents the number of rows in each layer,

L represents the number of columns in each row.

Each cell in this 3D grid contains a certain quantity of stock for a specific item. The stock values are non-negative integers. The warehouse management system keeps track of the exact quantity stored at each location (i, j, k), where:

i is the layer index,

j is the row index,

k is the column index.

To monitor and balance storage load, the management wants to identify the storage hotspot—the cell containing the maximum stock quantity. This helps in optimizing retrieval and load balancing.

Your task is to scan the entire 3D grid and report the highest stock value stored at any single cell.

Input Format
The first line contains three space-separated integers N, M, and L — representing the number of layers, rows per layer, and columns per row respectively.

The next N × M lines each contain L space-separated integers — the stock values in each row of the 3D warehouse grid.

Output Format
A single integer — the maximum stock value present in any cell of the warehouse.

Constraints
1 ≤ N, M, L ≤ 30

0 ≤ warehouse[i][j][k] ≤ 10⁴

Sample Testcase 0
Testcase Input
3 3 3
1 2 3
4 5 6
7 8 9
10 11 12
13 14 15
16 17 18
19 20 21
22 23 24
25 26 27
Testcase Output
27
Explanation
The 3D warehouse consists of 3 layers. The highest stock quantity is 27, located in the last cell of the last layer.

Sample Testcase 1
Testcase Input
2 2 2
1 2
3 4
5 6
7 8
Testcase Output
8
Explanation
The 3D grid representation is:
Layer 0:
1 2  
3 4  


Layer 1:
5 6  
7 8  
The maximum stock in any single cell is 8, which occurs in the last cell of Layer 1.


  SOLTUIONS:
  import java.util.Scanner;

class Main {
    public static int user_logic(int N, int M, int L, int[][][] warehouse) {
        int maxVal = 0; // since stock values are >= 0
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                for (int k = 0; k < L; k++) {
                    if (warehouse[i][j][k] > maxVal) {
                        maxVal = warehouse[i][j][k];
                    }
                }
            }
        }
        return maxVal;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt();
        int M = sc.nextInt();
        int L = sc.nextInt();

        int[][][] warehouse = new int[N][M][L];

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                for (int k = 0; k < L; k++) {
                    warehouse[i][j][k] = sc.nextInt();
                }
            }
        }

        int result = user_logic(N, M, L, warehouse);
        System.out.println(result);
        sc.close();
    }
}


  
