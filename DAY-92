XOR Queries of a Subarray
Problem Statement
You are given an array arr of positive integers. You are also given the array queries where queries[i] = [lefti, righti].

For each query i compute the XOR of elements from left to right (that is, arr[left] XOR arr[left + 1] XOR ... XOR arr[right] ).

Display an array answer where answer[i] is the answer to the ith query.

Input Format
The first line contains the number of elements in the array, n.

The second line contains n space-seprated integers representing the array

The third line contains the number of queries, q

The fourth line contains the number of columns in queries matrxi which is always 2.

The next q lines contains the queries where there are two space-seprated integers represnting left and right.

Output Format
Display a single line containing q space-seprated integers representing the answer to each query.

Constraints
1 <= arr.length, queries.length<= 3 ^ 104

1 <= arr[i] <= 109

queries[i].length == 2

0 <= lefti<= righti <arr.length

Sample Testcase 0
Testcase Input
4
4 8 2 10
4
2
2 3
1 3
0 0
0 3
Testcase Output
8
0
4
4
Explanation
The answer to the queries:


For 1st query: 2^10 = 8


For 2nd query:8^2^10 = 0


For 3rd query:4 = 4


For 4th query: 4^8^2^10 = 4

SOLUTION:

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        int q = sc.nextInt();  // number of queries
        int cols = sc.nextInt(); // always 2 (not used)

        // Step 1: Build prefix XOR array
        int[] prefixXor = new int[n];
        prefixXor[0] = arr[0];
        for (int i = 1; i < n; i++) {
            prefixXor[i] = prefixXor[i - 1] ^ arr[i];
        }

        // Step 2: Answer queries
        int[] answer = new int[q];
        for (int i = 0; i < q; i++) {
            int l = sc.nextInt();
            int r = sc.nextInt();

            if (l == 0) {
                answer[i] = prefixXor[r];
            } else {
                answer[i] = prefixXor[r] ^ prefixXor[l - 1];
            }
        }

        // Step 3: Print result
        for (int i = 0; i < q; i++) {
            System.out.println(answer[i]);
        }
    }
}
