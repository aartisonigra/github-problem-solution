Problem Statement
Lewis, a computer teacher, is preparing a problem for his students. He has a string S containing English letters and parentheses.
The task is to reverse the substrings within each pair of matching parentheses, starting from the innermost pair and working outward.
Help Lewis by producing the final reversed string without any parentheses.

Note: S only contains lower case English characters and parentheses “(“ and “)”. It is guaranteed that all parentheses are balanced.

Input Format
The input is a single string S that contains English letters and parentheses.

Output Format
Output a single line with the final string after reversing the substrings within each pair of matching parentheses, with all parentheses removed.

 
Constraints
1 <= S.length<= 3 * 10^6

Sample Testcase 0
Testcase Input
(ab(cd)ef)

Testcase Output
fecdba

Explanation
For the input (ab(cd)ef):
Reverse cd to get dc, resulting in (abdcef).
Reverse the whole string inside the outer parentheses: (abdcef) becomes fecdba.

Sample Testcase 1
Testcase Input
(hfgd)

Testcase Output
dgfh

Explanation
For the input (hfgd):
Since there are no nested parentheses, reverse the entire string within the outer parentheses:
The string hfgd inside (hfgd) becomes dgfh.

SOLUTIONS:

import java.util.*;

public class Main {
    public static String reverseParentheses(String s) {
        Stack<Integer> stack = new Stack<>();
        char[] chars = s.toCharArray();
        Map<Integer, Integer> pair = new HashMap<>();

        // Step 1: Match parentheses using stack
        for (int i = 0; i < chars.length; i++) {
            if (chars[i] == '(') {
                stack.push(i);
            } else if (chars[i] == ')') {
                int j = stack.pop();
                pair.put(i, j);
                pair.put(j, i);
            }
        }

        // Step 2: Traverse string and reverse between pairs dynamically
        StringBuilder result = new StringBuilder();
        int direction = 1; // 1 → forward, -1 → backward
        for (int i = 0; i < chars.length; i += direction) {
            if (chars[i] == '(' || chars[i] == ')') {
                i = pair.get(i);
                direction = -direction; // reverse direction
            } else {
                result.append(chars[i]);
            }
        }

        return result.toString();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        System.out.println(reverseParentheses(s));
        sc.close();
    }
}
