Subtree of Another Tree
Problem Statement
Marco is fond of storybooks. He is currently reading a very interesting book where there is a concept of a parallel world. Two worlds will be called parallel if one world is completely a subpart of the other one in terms of structure and value.

The world has countries that are connected with each other in the form of a tree.

Marco is curious about whether World B is a parallel world to World A or not.

Input Format
The first line contains an integer N, the number of inputs representing the structure of countries in World A including ‘null’.

The second line contains N strings which represent numbers countriesA[i] where 0 ≤ i < N .

The third line contains an integer M, the number of inputs representing the structure of countries in World B including ‘null’.

The fourth line contains M strings which represent numbers countriesB[i] where 0 ≤ i < M .

Output Format
The first line contains ‘YES’ if World B is parallel world to World A , otherwise ‘NO’.

Constraints
-10^5 <= N,M <= 10^5

-10^4 <= countriesA[i], countriesB[i] <= 10^4

‘null’  in countriesA[i] , countriesB[i] represents NULL value.

Sample Testcase 0
Testcase Input
5
3 4 5 1 2
3
4 1 2
Testcase Output
YES
Explanation
Here , The world B is parallel world to world A .
Sample Testcase 1
Testcase Input
10
3 4 5 1 2 null null 1 null 0
3
4 1 2
Testcase Output
NO


SOLTUIONS:

import java.util.*;

class Node {
    int data;
    Node left, right;
    Node(int item) {
        data = item;
        left = right = null;
    }
}

public class Main {

    // Function to build tree from level order input
    static Node buildTree(String[] nodes) {
        if (nodes.length == 0 || nodes[0].equals("null"))
            return null;

        Node root = new Node(Integer.parseInt(nodes[0]));
        Queue<Node> q = new LinkedList<>();
        q.add(root);

        int i = 1;
        while (!q.isEmpty() && i < nodes.length) {
            Node curr = q.poll();

            // Left child
            if (i < nodes.length && !nodes[i].equals("null")) {
                curr.left = new Node(Integer.parseInt(nodes[i]));
                q.add(curr.left);
            }
            i++;

            // Right child
            if (i < nodes.length && !nodes[i].equals("null")) {
                curr.right = new Node(Integer.parseInt(nodes[i]));
                q.add(curr.right);
            }
            i++;
        }
        return root;
    }

    // Check if two trees are identical
    static boolean isIdentical(Node a, Node b) {
        if (a == null && b == null) return true;
        if (a == null || b == null) return false;
        if (a.data != b.data) return false;

        return isIdentical(a.left, b.left) && isIdentical(a.right, b.right);
    }

    // Check if tree B is a subtree of tree A
    static boolean isSubtree(Node a, Node b) {
        if (b == null) return true;
        if (a == null) return false;

        if (isIdentical(a, b)) return true;

        return isSubtree(a.left, b) || isSubtree(a.right, b);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // World A
        int n = Integer.parseInt(sc.nextLine().trim());
        String[] countriesA = sc.nextLine().trim().split(" ");

        // World B
        int m = Integer.parseInt(sc.nextLine().trim());
        String[] countriesB = sc.nextLine().trim().split(" ");

        Node rootA = buildTree(countriesA);
        Node rootB = buildTree(countriesB);

        if (isSubtree(rootA, rootB)) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
