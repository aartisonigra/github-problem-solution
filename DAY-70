Problem Statement
Jimmy's passion for sorting faces a challenge from George.

Given two sets of integers, the goal is to sort the first set in a way that preserves the order found in the second set. Elements absent in the second set should be sorted in ascending order at the end of the first set.

Can you assist Jimmy in crafting the resulting array?

Input Format
The first line of input consists of integers n and m - the size of first and second set, respectively.

The second line of input consists of elements of first set.

The third line of input consists of elements of second set.

Output Format
Print the elements of the final set.

Constraints
1 <= n , m<= 100000
0 <= set1[i], set2[i] <= 100000
All the elements of set2 are unique.
Each elements of set2 is in set1.
Sample Testcase 0
Testcase Input
7 4
4 3 1 3 4 1 5
4 5 3 1
Testcase Output
4 4 5 3 3 1 1
Explanation
Based on set 2, the order of elements should be 4 5 3 1 and therefore we rearrange the elements in set 1 to: 4 4 (all the 4's first) 5 (all the 5's second) 3 3 (all the 3's third) 1 1 (all the 1's last)

Sample Testcase 1
Testcase Input
6 2
8 9 3 2 9 9
8 9
Testcase Output
8 9 9 9 2 3
Explanation
Based on set 2, the order of elements should be 8 9 and therefore we rearrange the elements in set 1 to: 8 (all the 8's first) 9 9 9 (all the 9's second) 2 3 (sorting the remaining elements)


SOLTUIONS:

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Read sizes
        int n = sc.nextInt();
        int m = sc.nextInt();

        int[] set1 = new int[n];
        int[] set2 = new int[m];

        // Read set1
        for (int i = 0; i < n; i++) {
            set1[i] = sc.nextInt();
        }

        // Read set2
        for (int i = 0; i < m; i++) {
            set2[i] = sc.nextInt();
        }

        // Map for storing frequency of elements in set1
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int num : set1) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

        List<Integer> result = new ArrayList<>();

        // Add elements from set2 in the specified order
        for (int key : set2) {
            if (freqMap.containsKey(key)) {
                int count = freqMap.get(key);
                for (int i = 0; i < count; i++) {
                    result.add(key);
                }
                freqMap.remove(key); // remove so we know what's left
            }
        }

        // Collect and sort the remaining elements not in set2
        List<Integer> remaining = new ArrayList<>();
        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
            for (int i = 0; i < entry.getValue(); i++) {
                remaining.add(entry.getKey());
            }
        }
        Collections.sort(remaining);

        // Add remaining sorted values to result
        result.addAll(remaining);

        // Print final result
        for (int num : result) {
            System.out.print(num + " ");
        }
    }
}
