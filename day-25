Maximize Task Allocation With Batteries
Problem Statement
You are given a set of tasks with specific energy requirements and a set of batteries with varying power capacities.

Each task can only be allocated to one battery, and each battery can only be used for one task.
Find the maximum number of tasks that can be completed by assigning each task to a compatible battery such that the task's energy requirement does not exceed the battery's power supply.

Input Format
The first line contains two space-separated integers N and M representing a number of tasks and the batteries respectively.
The second line contains N space-separated integers representing the energy requirements of the tasks.
The third line contains M space-separated integers representing the power supplies of the batteries

Output Format
Print an integer representing the maximum number of tasks that can be completed.

 
Constraints
1 <= N, M <= 20

Values in both arrays can be range from 1 to 1000.

Sample Testcase 0
Testcase Input
3 3
5 3 7
4 6 2
Testcase Output
2
Explanation
We have 3 tasks and 3 batteries. Given the enegy requirements of each task and power supply of each batteries : 
Only Task 1 and task 2 can be completed using batteries of power 6 and 4 respectively. 
Task 3 needed 7 power of energy which can not be fulfilled by available batteries.

Sample Testcase 1
Testcase Input
3 3
8 6 9
5 3 7
Testcase Output
1
Explanation
We have 3 tasks and 3 batteries. Given the enegy requirements of each task and power supply of each batteries : 
Only Task 2 can be completed using battery of power 7 
Task 1 and task 3 needed 8 and 9 power of energy which can not be fulfilled by available batteries .

Companies
Topics
Suggested Questions
Discussion Channel
Unstop logo
Java (openjdk 1.7.0_91)
00:00:00
Exit
252627282930313233343536
        }

        return taskCount;
    }
}

Test Custom Test
Save & Compile
Submit Code
arrow_drop_down
The best score amongst all your submissions
would be considered for evaluation.

SOLUTONS:

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();  // number of tasks
        int m = sc.nextInt();  // number of batteries

        List<Integer> energy = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            energy.add(sc.nextInt());
        }

        List<Integer> power = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            power.add(sc.nextInt());
        }

        int maxTasks = maximizeTasks(energy, power);
        System.out.println(maxTasks);
    }

    public static int maximizeTasks(List<Integer> energy, List<Integer> power) {
        // Sort both energy and power arrays to match tasks with batteries efficiently
        Collections.sort(energy);
        Collections.sort(power);

        int taskCount = 0;
        int i = 0, j = 0;

        // Use a greedy approach to match tasks to batteries
        while (i < energy.size() && j < power.size()) {
            // If the current battery can fulfill the task energy requirement
            if (power.get(j) >= energy.get(i)) {
                taskCount++;  // Task assigned
                i++;  // Move to next task
                j++;  // Move to next battery
            } else {
                j++;  // Current battery can't handle this task, try next battery
            }
        }

        return taskCount;
    }
}

