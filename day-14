PROBLEAMS:

Prime and Square Nexus
Problem Statement
In a kingdom ruled by numbers, a matrix of size NÃ—N represented the heart of the land. The matrix, filled with positive integers, had special rules:

Prime Numbers: These guardians of wisdom were replaced by 0 but left no trace in their rows or columns.

Perfect Squares: These symbols of balance had the power to mark their entire row and column with -1.

The kingdom's rulers needed to organize the matrix by applying these transformations and count:

The number of rows fully transformed to -1.
The number of prime numbers replaced with 0.
After processing the matrix, the rulers sought to present the transformed matrix and showcase the results of this magical process.

Note: -1 will have high priority than 0.

Input Format
The first line contains a single integer N, the size of the matrix.

The next N lines contain N integers each, representing the elements of the matrix.

Output Format
Print two integers: the count of rows fully marked as -1 and the count of prime numbers replaced with 0.

Print the modified matrix with elements of the same row separated by a single space. Start the next row on a new line.

Constraints
2 <= N <= 100

2 <= grid[i][j] <= 10^6

Sample Testcase 0
Testcase Input
4
2 6 4 8
5 9 12 15
10 11 18 7
20 21 25 16
Testcase Output
3 0
-1 -1 -1 -1
-1 -1 -1 -1
10 -1 -1 -1
-1 -1 -1 -1
Explanation
In the given matrix,
The element 2, 5, 11, 7 are prime so replace them with 0.
0 6 4 8
0 9 12 15
10 0 18 0
20 21 25 16

Now, 4, 9, 25 and 16 are perfect square, so replace the entire row and column with -1.
-1 -1 -1 -1
-1 -1 -1 -1
10 -1 -1 -1
-1 -1 -1 -1
Since -1 have high priority than 0, so it has replace all 0s.
Number of rows entirely marked as -1 = 3
Number of zeroes : 0 (we have to considered the final matrix after replacements)

Sample Testcase 1
Testcase Input
3
4 5 6
2 11 13
12 18 10
Testcase Output
1 2
-1 -1 -1
-1 0 0
-1 18 10
Explanation
In the given matrix,
The element 2, 5, 11 and 13 are prime so replace them with 0.
4 0 6
0 0 0
12 18 10

Now, 4 is a perfect square, so replace the entire row and column with -1.
-1 -1 -1
-1 0 0
-1 18 10

Since -1 have high priority than 0, so it has replace the 0s present in (0,1) and (1,0).
Number of rows entirely marked as -1 = 1
Number of zeroes : 2 (we have to considered the final matrix after replacements 


SOLUTIONS:


import java.util.*;

public class Main {
    // Prime check function
    public static boolean isPrime(int num) {
        if (num < 2) return false;
        for (int i = 2; i * i <= num; i++) {
            if (num % i == 0)
                return false;
        }
        return true;
    }

    // Perfect square check
    public static boolean isPerfectSquare(int num) {
        int root = (int)Math.sqrt(num);
        return root * root == num;
    }

    public static void transformMatrix(int[][] matrix, int n, int[] results) {
        boolean[] markRows = new boolean[n];
        boolean[] markCols = new boolean[n];

        // First pass: find perfect squares and mark rows and columns
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (isPerfectSquare(matrix[i][j])) {
                    markRows[i] = true;
                    markCols[j] = true;
                }
            }
        }

        // Second pass: replace primes with 0 (but count only if not in -1 area)
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (isPrime(matrix[i][j])) {
                    matrix[i][j] = 0;
                }
            }
        }

        // Third pass: overwrite rows and columns with -1 (higher priority)
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (markRows[i] || markCols[j]) {
                    matrix[i][j] = -1;
                }
            }
        }

        // Count fully -1 rows and 0s (after transformations)
        int rowCount = 0, zeroCount = 0;
        for (int i = 0; i < n; i++) {
            boolean allMinusOne = true;
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] != -1)
                    allMinusOne = false;
                if (matrix[i][j] == 0)
                    zeroCount++;
            }
            if (allMinusOne)
                rowCount++;
        }

        results[0] = rowCount;
        results[1] = zeroCount;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] matrix = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }
        int[] results = new int[2];
        transformMatrix(matrix, n, results);
        System.out.println(results[0] + " " + results[1]);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}

  
